# -*- coding: utf-8 -*-
"""Untitled33.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RwKboZYQpApINlLftTV4i3jSxUj_Omde
"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

train_df=pd.read_csv("train.csv")
test_df=pd.read_csv("test.csv")

train_df.describe()

train_df.info()

train_df.head(6)

total=train_df.isnull().sum().sort_values(ascending=False)
percent_1=(train_df.isnull().sum()/train_df.isnull().count())*100
percent_2=(round(percent_1,1).sort_values(ascending=False))
missing_data=pd.concat([total,percent_2],axis=1,keys=['total','%'])

missing_data

train_df.columns.values

train_df["Age"].fillna(train_df["Age"].mean(),inplace=True)



train_df["Embarked"].fillna(train_df["Embarked"].mode()[0],inplace=True)

train_df.isnull().sum()



"""#data visualiztion part


"""

import seaborn as sns

train_df.value_counts("Sex")

train_df.value_counts("Survived")

train_df.value_counts("Embarked")

sns.countplot("Survived",data=train_df)

sns.countplot("Sex",data=train_df)

sns.countplot("Embarked",data=train_df)

sns.countplot("Sex",hue='Survived',data=train_df)

sns.countplot("Sex",hue='Embarked',data=train_df)

sns.countplot("Embarked",hue='Survived',data=train_df)

"""Data processing

"""

train_df=train_df.drop(columns=["Name","Ticket","Cabin"],axis=1)

train_df

x=train_df.drop(columns=["Survived","PassengerId"],axis=1)
y=train_df["Survived"]

x=x.values

x

y=y.values

y

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
x[:,1]=le.fit_transform(x[:,1])

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
x[:,-1]=le.fit_transform(x[:,-1])

x[:,-1]



from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=0)

from sklearn.preprocessing import StandardScaler
se=StandardScaler()
x_train=se.fit_transform(x_train)
x_test=se.transform(x_test)

from sklearn.ensemble import RandomForestClassifier
classifier=RandomForestClassifier(n_estimators=1000,criterion="entropy",random_state=0)
classifier.fit(x_train,y_train)

y_pred=classifier.predict(x_test)

from sklearn.metrics import accuracy_score,confusion_matrix
csss=confusion_matrix(y_test,y_pred)
accs=accuracy_score(y_test,y_pred)
accs

